pipeline {
    agent any

    environment {
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token') // Store your DigitalOcean API token securely
        GITHUB_CREDENTIALS = credentials('github-cred') // Store your GitHub credentials securely
        INVENTORY_FILE = 'inventory.ini'
        PROJECT_DIR = 'final-project-digitalocean' // Your project directory
        TERRAFORM_DIR = "${WORKSPACE}/${PROJECT_DIR}/terraform" // Path to your Terraform files
        SSH_KEY_PATH = '/home/ahmed/.ssh/id_rsa.pub' // Path to your SSH key
        DROPLET_NAME = 'my-droplet' // Name of the DigitalOcean droplet
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Use GitHub credentials to clone the repository
                    git branch: 'main', url: 'https://github.com/Ahmed3019/final-project-digitalocean.git', credentialsId: 'github-cred'
                }
            }
        }

        stage('Run Terraform to Create Droplet') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            terraform init
                            terraform plan -out=tfplan \
                                -var="digitalocean_token=${DIGITALOCEAN_TOKEN}" \
                                -var="droplet_name=${DROPLET_NAME}" \
                                -var="ssh_key_path=${SSH_KEY_PATH}"

                            # Check if there are changes to be applied
                            if terraform show -json tfplan | jq .resource_changes | grep -q '"change"'; then
                                echo "Changes detected, applying infrastructure changes..."
                                terraform apply -auto-approve tfplan
                            else
                                echo "No changes to infrastructure, skipping apply."
                            fi
                        '''
                        // Capture the public IP of the Droplet
                        DROPLET_PUBLIC_IP = sh(script: "terraform output -raw droplet_ip", returnStdout: true).trim()
                        echo "Droplet Public IP: ${DROPLET_PUBLIC_IP}" // Log the captured IP for debugging
                        
                        // Create the Ansible inventory file in the Jenkins workspace
                        writeFile file: "${WORKSPACE}/${INVENTORY_FILE}", text: "[frontend]\n${DROPLET_PUBLIC_IP} ansible_user=root ansible_ssh_private_key_file=${SSH_KEY_PATH}"
                        echo "Ansible inventory file created at: ${WORKSPACE}/${INVENTORY_FILE}"
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    // Run the Ansible playbook if the previous steps were successful
                    if (currentBuild.result == null) {
                        sh "ansible-playbook -i ${WORKSPACE}/${INVENTORY_FILE} setup.yaml"
                    } else {
                        echo "Skipping Ansible Playbook execution due to previous errors."
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
    }
}
