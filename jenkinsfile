pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "ahmedsalama3014/frontend-task" // Docker image name
        GIT_REPO = "https://github.com/Ahmed3019/my-cv-application.git" // GitHub repository URL
        K8S_NAMESPACE = "frontend-task" // Kubernetes namespace
        TERRAFORM_DIR = "terraform" // Directory for Terraform files
        INVENTORY_FILE = "inventory" // Ansible inventory file
        EC2_PUBLIC_IP = '' // Initialize empty variable for EC2 IP
        AWS_ACCESS_KEY_ID = credentials('aws-key-cred') // Access Key ID from Jenkins credentials
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-cred') // Secret Access Key from Jenkins credentials
    }

    stages {
        stage('Clone GitHub Repo') {
            steps {
                script {
                    git branch: 'main', credentialsId: 'github-cred', url: "${GIT_REPO}"
                }
            }
        }

        stage('Check for Changes in GitHub') {
            steps {
                script {
                    // Check for any new commits in the GitHub repository
                    def changes = sh(script: "git fetch origin main && git status --porcelain", returnStdout: true).trim()
                    if (changes) {
                        echo "Changes detected in GitHub repository."
                    } else {
                        echo "No changes detected in GitHub repository. Skipping build."
                        currentBuild.result = 'SUCCESS'
                        return // Skip remaining stages
                    }
                }
            }
        }

        stage('Check if Image Exists on Docker Hub') {
            steps {
                script {
                    // Check if the image already exists in Docker Hub
                    def imageExists = sh(script: "docker pull ${DOCKER_IMAGE}:latest && docker inspect --format='{{.Id}}' ${DOCKER_IMAGE}:latest", returnStatus: true)
                    if (imageExists == 0) {
                        echo "Image already exists on Docker Hub. Skipping build and push."
                        currentBuild.result = 'SUCCESS'
                        return // Skip remaining stages
                    } else {
                        echo "Image not found on Docker Hub. Proceeding to build."
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_IMAGE}:latest")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-cred') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Run Terraform to Create EC2') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            terraform init
                            terraform plan -out=tfplan \
                                -var="aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
                                -var="aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}"

                            # Check if there are changes to be applied
                            if terraform show -json tfplan | jq .resource_changes | grep -q '"change"'; then
                                echo "Changes detected, applying infrastructure changes..."
                                terraform apply -auto-approve tfplan
                            else
                                echo "No changes to infrastructure, skipping apply."
                            fi
                        '''
                        // Capture the public IP of the EC2 instance
                        EC2_PUBLIC_IP = sh(script: "terraform output -raw instance_ip", returnStdout: true).trim()
                        echo "EC2 Public IP: ${EC2_PUBLIC_IP}" // Log the captured IP for debugging
                        
                        // Create the Ansible inventory file in the Jenkins workspace
                        writeFile file: "${env.WORKSPACE}/${INVENTORY_FILE}", text: "[frontend]\n${EC2_PUBLIC_IP} ansible_user=ubuntu ansible_ssh_private_key_file=./nx-key.pem"
                        echo "Ansible inventory file created at: ${env.WORKSPACE}/${INVENTORY_FILE}"
                    }
                }
            }
        }

        stage('Setup Environment on EC2 using Ansible') {
            steps {
                script {
                    // Ensure the nx-key.pem file has the correct permissions
                    sh 'chmod 600 nx-key.pem'

                    // Run the Ansible playbook from the local machine targeting the EC2 instance
                    sh '''
                        ansible-playbook -i ${WORKSPACE}/${INVENTORY_FILE} setup_environment.yaml \
                        --private-key ./nx-key.pem \
                        -e "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
                    '''
                }
            }
        }

        stage('Run Minikube Locally') {
            steps {
                script {
                    // Start Minikube
                    sh '/usr/local/bin/minikube start' // Use the full path to minikube

                    // Create the Kubernetes namespace if it doesn't exist
                    sh 'kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -'

                    // Deploy the application
                    sh 'kubectl apply -f deployment.yaml -n ${K8S_NAMESPACE}'
                    sh 'kubectl apply -f service.yaml -n ${K8S_NAMESPACE}'

                    // Get the service URL
                    def serviceUrl = sh(script: "/usr/local/bin/minikube service frontend-task --url -n ${K8S_NAMESPACE}", returnStdout: true).trim()
                    echo "Access your application at: ${serviceUrl}"
                }
            }
        }
    }

    post {
        always {
            script {
                def exposedPort = '8020' // Port you want to expose
                def appUrl = "http://${EC2_PUBLIC_IP}:${exposedPort}"
                echo "Pipeline finished. EC2 Public IP: ${EC2_PUBLIC_IP}, Exposed Port: ${exposedPort}, Application URL: ${appUrl}"
            }
        }
    }
}
